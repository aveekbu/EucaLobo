<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://ew/skin/ew.css" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://ew/locale/ew.dtd">

<dialog id="ew.dialog.newpermission" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    buttons="accept,cancel"
    ondialogaccept="return authorize();"
    ondialogcancel="return true;"
    onload="init();"
    title="Grant New Permission"
    buttonlabelaccept="Add">

    <script type="application/x-javascript" src="chrome://ew/content/model.js" />
    <script type="application/x-javascript" src="chrome://ew/content/utils.js" />
    <script type="application/x-javascript">
    <![CDATA[

    this.unused = new Array()
    this.used = new Array()

    function authorize() {
        // Get the group's name
        var newPerm = new Object();
        newPerm.cidrIp = "0.0.0.0/0";

        // Need to get the IP etc.
        var radioSel = $("ew.hostnet.group").selectedItem.value;

        switch (radioSel) {
        case "host":
            var textbox = $("ew.source.host");
            if (textbox.value == "") {
                alert("Please provide a source host");
                textbox.select();
                return false;
            }
            newPerm.cidrIp = textbox.value.trim();
            if (newPerm.cidrIp.indexOf('/') == -1) {
                newPerm.cidrIp += "/32";
            }
            if (!this.validateCIDR(newPerm.cidrIp, textbox)) {
                return false;
            }
            break;

        case "range":
            var textbox = $("ew.source.range");
            if (textbox.value == "") {
                alert("Please provide a source host range");
                textbox.select();
                return false;
            }
            newPerm.cidrIp = textbox.value.trim();
            if (!this.validateCIDR(newPerm.cidrIp, textbox)) {
                return false;
            }
            break;

        case "group":
            var group = $("ew.source.group");
            var user = $("ew.source.user");
            if (!user.value || !group.value) {
                alert("Please provide a source group / user");
                return false;
            }
            newPerm.srcGroup = { id: group.value, name: group.selectedItem.label.split("/")[1], ownerId: user.value };
        }

        var protocol = $("ew.protocol").value;
        if (protocol == "any") {
            protocol = "-1";
            newPerm.toPort = "0";
            newPerm.fromPort = "65535";
        } else

        if (protocol == "other") {
            protocol = $("ew.other").value;
            if (protocol == "tcp" || protocol == "udp") {
                var fromTextBox = $("ew.fromport");
                var toTextBox   = $("ew.toport");
                if (!this.validateMinPort(fromTextBox)) {
                    return false;
                }
                newPerm.fromPort = fromTextBox.value.trim();

                if (!this.validateMaxPort(toTextBox, fromTextBox)) {
                      return false;
                }
                newPerm.toPort = toTextBox.value.trim();
            } else

            if (protocol == "icmp") {
                newPerm.fromPort = $("ew.icmptype").value.trim();
                newPerm.toPort = $("ew.icmpcode").value.trim();
            }
        } else {
            newPerm.toPort = $("ew.knownport").value.trim();
            newPerm.fromPort = $("ew.knownport").value.trim();
            protocol = $("ew.protocol.menuitem").value;
        }

        newPerm.ipProtocol = protocol;
        if (newPerm.fromPort == "0" && newPerm.toPort == "65535" && newPerm.cidrIp == "0.0.0.0/0") {
            var fOpen = confirm("This will effectively disable your firewall and open all ports to the world. Continue?");

            // If the user chooses to change these settings, bring the dialog back in focus.
            if (!fOpen) {
                $("ew.toport").select();
                return false;
            }
        }
        this.retVal.type = $("ew.type").value;
        this.retVal.ok = true;
        this.retVal.newPerm = newPerm;
        return true;
    }

    function validateMinPort(minTextBox) {
        var val = parseInt(minTextBox.value);
        if (val < 0 || isNaN(val)) {
            alert("Lower port range bound must be a non-negative integer");
            textbox.select();
            return false;
        }
        return true;
    }

    function validateMaxPort(maxTextBox, minTextBox) {
        maxval = parseInt(maxTextBox.value);
        if (maxval < 0 || isNaN(maxval)) {
            alert("Upper port range bound must be a non-negative integer");
            maxTexBbox.select();
            return false;
        }
        var minval = parseInt(minTextBox.value);
        if (minval > maxval) {
            alert("Upper port range bound may not be smaller than lower bound, maximum value may not be smaller than minimum value");
            maxTextBox.select();
            return false;
        }
        return true;
    }

    function validateCIDR(cidrStr, textbox) {
        if (!cidrStr.match(/^\d+\.\d+\.\d+\.\d+\/\d+$/)) {
            alert("Malformed CIDR, expecting n.n.n.n/n");
            textbox.select();
            return false;
        }
        return true;
    }

    function validateSourceUserGroup() {
        var user = $("ew.source.user");
        if (user.value == "") {
            alert("Please provide a source user ID");
            user.select();
            return false;
        }
        var group = $("ew.source.group");
        if (group.value == "") {
            alert("Please provide a source security group name");
            group.select();
            return false;
        }
        return true;
    }

    function displayProtocolDetails(fDisplay) {
        if (fDisplay) {
            selectProtocolDataDeck(1);
            selectProtocolDeck(1);
        } else {
            this.selectProtocolDataDeck(0);
            this.selectProtocolDeck(0);
            var protocol = $("ew.protocol").value;
            $("ew.knownport").value = protPortMap[protocol];
        }
    }

    function selectionChanged() {
        var protocol = $("ew.protocol").value;
        if (protocol == "any") {
              this.selectProtocolDataDeck(3);
            this.selectProtocolDeck(2);
        }
    }

    function getHostAddress() {
        var ipAddress = this.core.api.queryCheckIP();
        var hostIP = $("ew.source.host");
        hostIP.value = ipAddress.replace(/\s/g,'') + "/32";
        $("ew.hostnet.group").selectedIndex = 0;
    }

    function getHostNetwork() {
        var ipAddress = this.core.api.queryCheckIP("block");
        var hostSubnet = $("ew.source.range");
        hostSubnet.value = ipAddress.replace(/\s/g,'');
        $("ew.hostnet.group").selectedIndex = 1;
    }

    function selectProtocolDeck(index) {
        var deck = $("ew.deck.protocol");
        deck.selectedIndex = index;
    }

    function selectProtocolDataDeck(index) {
        var deck = $("ew.deck.protocol.data");
        deck.selectedIndex = index;
    }

    function groupChanged() {
        var type = $("ew.hostnet.group").selectedItem.value;
        if (type == "range" && $("ew.source.range").value == "") {
              $("ew.source.range").value = "0.0.0.0/0";
        }
    }

    function typeChanged() {
        var type = $("ew.type")
        var permCaption = $("ew.add.caption");
        permCaption.label = "Add New " + type.value + " Permission for Security Group: " + this.group.name;
    }

    function init() {
        this.group = window.arguments[0];
        this.core = window.arguments[1];
        this.retVal = window.arguments[2];

        if (this.group == null) {
            return true;
        }
        var type = $("ew.type");
        type.appendItem('Ingress', 'Ingress');
        if (this.group.vpcId) {
            type.appendItem('Egress', 'Egress');
        }
        type.selectedIndex = 0;

        var permCaption = $("ew.add.caption");
        permCaption.label = "Add New " + this.retVal.type + " Permission for Security Group: " + this.group.name;

        var user = $("ew.source.user");
        user.value = this.group.ownerId;
        var securityGroups = this.core.queryModel('securityGroups');
        var groupMenu = $("ew.source.group");
        groupMenu.appendItem("", "");
        for(var i in securityGroups) {
            if ((this.group.vpcId != "" && securityGroups[i].vpcId == "") || (this.group.vpcId == "" && securityGroups[i].vpcId != "")) {
                continue;
            }
            groupMenu.appendItem(securityGroups[i].id + "/" + securityGroups[i].name, securityGroups[i].id);
            if (this.group.id == securityGroups[i].id) {
                groupMenu.selectedIndex = i;
            }
        }

        // Initialize the Protocol Port for the selected protocol.
        var proto = $("ew.protocol");
        $("ew.knownport").value = protPortMap[proto.value];
        if (this.group.vpcId) {
            proto.insertItemAt(0, "Any", "any");
            proto.selectedIndex = 0;
        }
    }

    ]]>
    </script>

    <groupbox flex="1" orient="vertical" id="ew.add.box">
        <caption id="ew.add.caption" label="Add New Permission for Security Group: " />

       <groupbox flex="1" orient="vertical">
          <label control="ew.type" value="Permission Type:"/>
          <menulist id="ew.type" size="50" onselect="typeChanged()" />
       </groupbox>

        <groupbox orient="vertical" flex="1">
            <caption label="Protocol Details" />
            <description>
               Select a protocol and specify a host/range
            </description>

            <grid flex="1">
                <columns>
                    <column />
                </columns>
                <rows>
                    <row>
                        <hbox flex="0">
                            <label control="ew.protocol" value="Known Port:" />
                            <menulist id="ew.protocol" selectedIndex="0" size="50" onselect="selectionChanged()">
                                <menupopup>
                                    <menuitem label="SSH" value="ssh" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="Other" value="other" oncommand="displayProtocolDetails(true);" />
                                    <menuitem label="RDP" value="rdp" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="HTTP" value="http" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="HTTPS" value="https" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="POP3" value="pop3" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="IMAP" value="imap" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="Secure POP3" value="spop" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="Secure IMAP" value="simap" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="DNS" value="dns" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="SMTP" value="smtp" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="SMTPS" value="smtps" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="MYSQL" value="mysql" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="Microsoft SQL Server" value="mssql" oncommand="displayProtocolDetails(false);" />
                                    <menuitem label="LDAP" value="ldap" oncommand="displayProtocolDetails(false);" />
                                </menupopup>
                            </menulist>
                        </hbox>
                    </row>
                    <row>
                        <deck id="ew.deck.protocol" selectedIndex="0">
                            <hbox flex="1" align="pack">
                                <label control="ew.protocol.menuitem" value="Protocol:" />
                                <menulist id="ew.protocol.menuitem" size="30" selectedIndex="0">
                                    <menupopup>
                                        <menuitem label="TCP/IP" value="tcp" />
                                        <menuitem label="UDP/IP" value="udp" />
                                        <menuitem label="ICMP" value="icmp" oncommand="selectProtocolDataDeck(2);" />
                                    </menupopup>
                                </menulist>
                            </hbox>
                            <hbox flex="1" align="pack">
                                <label control="ew.other" value="Protocol:" />
                                <menulist id="ew.other" size="30" selectedIndex="0">
                                    <menupopup>
                                        <menuitem label="TCP/IP" value="tcp" oncommand="selectProtocolDataDeck(1);" />
                                        <menuitem label="UDP/IP" value="udp" oncommand="selectProtocolDataDeck(1);" />
                                        <menuitem label="ICMP" value="icmp" oncommand="selectProtocolDataDeck(2);" />
                                    </menupopup>
                                </menulist>
                            </hbox>
                            <hbox flex="1" align="pack">
                            </hbox>
                        </deck>
                    </row>
                    <row>
                        <deck id="ew.deck.protocol.data" selectedIndex="0">
                            <hbox flex="1" align="pack">
                                <label control="ew.knownport" value="Port" />
                                <textbox id="ew.knownport" value="" size="10" />
                            </hbox>
                            <hbox flex="1" align="pack">
                                <label control="ew.fromport" value="Port Range:" />
                                <textbox id="ew.fromport" value="0" size="10" />
                                <label control="ew.toport" value="to" />
                                <textbox id="ew.toport" value="0" size="10" />
                            </hbox>
                            <hbox flex="1" align="pack">
                                <label control="ew.icmptype" value="ICMP Type" />
                                <textbox id="ew.icmptype" value="-1" size="10" />
                                <label control="ew.icmpcode" value="ICMP Code" />
                                <textbox id="ew.icmpcode" value="-1" size="10" />
                            </hbox>
                            <description align="center">All traffic will be affected</description>
                        </deck>
                    </row>
                </rows>
            </grid>
        </groupbox>

        <groupbox orient="vertical" flex="1">
            <caption label="Host/Network Details" />
            <radiogroup id="ew.hostnet.group" orient="vertical" oncommand="groupChanged()">
                <grid flex="1">
                    <columns>
                        <column align="center" style="min-width:120px;"/>
                        <column align="center" flex="1" />
                    </columns>
                    <rows >
                        <row style="padding-bottom:25px;" >
                            <hbox>
                               <radio id="host" value="host" />
                               <label control="host" value="Host" />
                            </hbox>
                            <hbox>
                              <label control="ew.source.host" value="CIDR:" />
                              <textbox id="ew.source.host" />
                              <button id="get-host-button" label="Get My Host Address" default="true" oncommand="getHostAddress();" />
                            </hbox>
                        </row>
                        <row style="padding-bottom:25px;" >
                            <hbox>
                              <radio id="range" value="range" />
                              <label control="range" value="Network" />
                            </hbox>
                            <hbox align="center">
                              <label control="ew.source.range" value="Network Range:" />
                              <textbox id="ew.source.range" />
                              <button id="get-network-button" label="Get My Network Range" default="true" oncommand="getHostNetwork();" />
                            </hbox>
                        </row>
                        <row align="center" style="padding-bottom:25px;" >
                            <hbox align="center">
                              <radio id="group" value="group" selected="true" />
                              <label control="group" value="Group" />
                            </hbox>
                            <vbox>
                                <hbox>
                                    <label control="ew.source.group" value="Group ID:" />
                                    <menulist id="ew.source.group" />
                                </hbox>
                                <hbox>
                                    <label control="ew.source.user" value="User ID:" />
                                    <textbox id="ew.source.user" value="" />
                                </hbox>
                            </vbox>
                        </row>
                    </rows>
                </grid>
            </radiogroup>
        </groupbox>
    </groupbox>
</dialog>
